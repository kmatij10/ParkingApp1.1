// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.Data.Database;

namespace Parking.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200810122702_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Parking.Data.Entities.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Parking.Data.Entities.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Model = "Chevrolet Aveo"
                        },
                        new
                        {
                            Id = 2L,
                            Model = "Opel Corsa"
                        },
                        new
                        {
                            Id = 3L,
                            Model = "Renault Clio"
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CarId")
                        .HasColumnType("bigint");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CarId = 1L,
                            LicensePlate = "lalalalal"
                        },
                        new
                        {
                            Id = 2L,
                            CarId = 1L,
                            LicensePlate = "nanananna"
                        },
                        new
                        {
                            Id = 3L,
                            CarId = 1L,
                            LicensePlate = "blblblbl"
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.Parked", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<long>("ParkingSpaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestStatusId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("ParkingSpaceId");

                    b.HasIndex("RequestStatusId");

                    b.ToTable("Parked");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            From = new DateTime(2020, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingSpaceId = 1L,
                            RequestStatusId = 1L,
                            To = new DateTime(2020, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 1L,
                            From = new DateTime(2020, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingSpaceId = 1L,
                            RequestStatusId = 1L,
                            To = new DateTime(2020, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 1L,
                            From = new DateTime(2019, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkingSpaceId = 1L,
                            RequestStatusId = 1L,
                            To = new DateTime(2019, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.ParkingSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(11, 8)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(11, 8)");

                    b.Property<long>("ParkingTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParkingTypeId");

                    b.HasIndex("RateId");

                    b.ToTable("ParkingSpaces");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Lat = 50.358398m,
                            Lng = 5.285080m,
                            ParkingTypeId = 1L,
                            RateId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Lat = 45.800440m,
                            Lng = 15.994100m,
                            ParkingTypeId = 1L,
                            RateId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Lat = 45.808190m,
                            Lng = 15.918490m,
                            ParkingTypeId = 1L,
                            RateId = 1L
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.ParkingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ParkingTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Type = "handicapped",
                            Zone = 2
                        },
                        new
                        {
                            Id = 2L,
                            Type = "regular",
                            Zone = 2
                        },
                        new
                        {
                            Id = 3L,
                            Type = "handicapped",
                            Zone = 2
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("PaymentPanelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPanelId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 3000.5m,
                            IssuedAt = new DateTime(2020, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentPanelId = 2L,
                            Status = "status"
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 1066.1m,
                            IssuedAt = new DateTime(2019, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentPanelId = 2L,
                            Status = "status2"
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 3111.9m,
                            IssuedAt = new DateTime(2020, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentPanelId = 2L,
                            Status = "status3"
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.PaymentPanel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChargingStart")
                        .HasColumnType("datetime2");

                    b.Property<long>("ParkedId")
                        .HasColumnType("bigint");

                    b.Property<int>("PayedForHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkedId");

                    b.ToTable("PaymentPanels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ChargingStart = new DateTime(2019, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkedId = 1L,
                            PayedForHours = 2
                        },
                        new
                        {
                            Id = 2L,
                            ChargingStart = new DateTime(2020, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkedId = 1L,
                            PayedForHours = 4
                        },
                        new
                        {
                            Id = 3L,
                            ChargingStart = new DateTime(2019, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParkedId = 1L,
                            PayedForHours = 1
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PriceHourly")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Rates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PriceHourly = 6.1m
                        },
                        new
                        {
                            Id = 2L,
                            PriceHourly = 2.1m
                        },
                        new
                        {
                            Id = 3L,
                            PriceHourly = 4.6m
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.RequestStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "neki status"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "drugi status"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "treci status"
                        });
                });

            modelBuilder.Entity("Parking.Data.Entities.Driver", b =>
                {
                    b.HasOne("Parking.Data.Entities.Car", "Car")
                        .WithMany("Drivers")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parking.Data.Entities.Parked", b =>
                {
                    b.HasOne("Parking.Data.Entities.Driver", null)
                        .WithMany("Parked")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parking.Data.Entities.ParkingSpace", null)
                        .WithMany("Parked")
                        .HasForeignKey("ParkingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parking.Data.Entities.RequestStatus", null)
                        .WithMany("Parked")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parking.Data.Entities.ParkingSpace", b =>
                {
                    b.HasOne("Parking.Data.Entities.ParkingType", null)
                        .WithMany("ParkingSpaces")
                        .HasForeignKey("ParkingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parking.Data.Entities.Rate", null)
                        .WithMany("ParkingSpaces")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parking.Data.Entities.Payment", b =>
                {
                    b.HasOne("Parking.Data.Entities.PaymentPanel", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentPanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parking.Data.Entities.PaymentPanel", b =>
                {
                    b.HasOne("Parking.Data.Entities.Parked", null)
                        .WithMany("PaymentPanels")
                        .HasForeignKey("ParkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
